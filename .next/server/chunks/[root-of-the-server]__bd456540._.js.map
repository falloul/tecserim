{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 6, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 60, "column": 0}, "map": {"version":3,"sources":["file:///Users/fatimazahraAlloul/Desktop/tecserim/src/app/api/contact/route.ts"],"sourcesContent":["import { NextResponse } from 'next/server';\n\ninterface ContactRequestBody {\n  name: string;\n  email: string;\n  message: string;\n}\n\nexport async function POST(request: Request) {\n  try {\n    const body: ContactRequestBody = await request.json();\n    const { name, email, message } = body;\n\n    if (!name || !email || !message || !email.includes('@')) {\n      return NextResponse.json(\n        { error: 'Invalid input. Please provide a valid name, email, and message.' },\n        { status: 400 }\n      );\n    }\n\n    const brevoUrl = 'https://api.brevo.com/v3/smtp/email';\n\n    const emailData = {\n      sender: {\n        name: name,\n        email: process.env.BREVO_SENDER_EMAIL,\n      },\n      to: [{\n        email: 'alloulfatimazahra9@gmail.com', \n        name: 'Tecserim'\n      }],\n      replyTo: {\n        email: email,\n        name: name\n      },\n      subject: `New Contact Form Message from: ${name}`,\n      textContent: `\n        Name: ${name}\n        Email: ${email}\n        Message:\n        ${message}\n      `,\n      htmlContent: `\n        <h3>New message from your website's contact form</h3>\n        <p><strong>Name:</strong> ${name}</p>\n        <p><strong>Email:</strong> <a href=\"mailto:${email}\">${email}</a></p>\n        <p><strong>Message:</strong></p>\n        <p style=\"white-space: pre-wrap;\">${message}</p>\n      `,\n    };\n\n    const response = await fetch(brevoUrl, {\n      method: 'POST',\n      headers: {\n        'accept': 'application/json',\n        'api-key': process.env.BREVO_API_KEY as string,\n        'content-type': 'application/json'\n      },\n      body: JSON.stringify(emailData)\n    });\n\n    const responseData = await response.json();\n\n    if (!response.ok) {\n      console.error('Brevo API Error:', responseData);\n      throw new Error(`Brevo API responded with status ${response.status}`);\n    }\n    return NextResponse.json(\n      { message: 'Email sent successfully!', brevoResponse: responseData },\n      { status: 200 }\n    );\n\n  } catch (error) {\n    console.error('An error occurred in the send-email API route:', error);\n    return NextResponse.json(\n      { error: 'Sorry, something went wrong and we could not send your message.' },\n      { status: 500 }\n    );\n  }\n}\n"],"names":[],"mappings":";;;AAAA;;AAQO,eAAe,KAAK,OAAgB;IACzC,IAAI;QACF,MAAM,OAA2B,MAAM,QAAQ,IAAI;QACnD,MAAM,EAAE,IAAI,EAAE,KAAK,EAAE,OAAO,EAAE,GAAG;QAEjC,IAAI,CAAC,QAAQ,CAAC,SAAS,CAAC,WAAW,CAAC,MAAM,QAAQ,CAAC,MAAM;YACvD,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACtB;gBAAE,OAAO;YAAkE,GAC3E;gBAAE,QAAQ;YAAI;QAElB;QAEA,MAAM,WAAW;QAEjB,MAAM,YAAY;YAChB,QAAQ;gBACN,MAAM;gBACN,OAAO,QAAQ,GAAG,CAAC,kBAAkB;YACvC;YACA,IAAI;gBAAC;oBACH,OAAO;oBACP,MAAM;gBACR;aAAE;YACF,SAAS;gBACP,OAAO;gBACP,MAAM;YACR;YACA,SAAS,CAAC,+BAA+B,EAAE,MAAM;YACjD,aAAa,CAAC;cACN,EAAE,KAAK;eACN,EAAE,MAAM;;QAEf,EAAE,QAAQ;MACZ,CAAC;YACD,aAAa,CAAC;;kCAEc,EAAE,KAAK;mDACU,EAAE,MAAM,EAAE,EAAE,MAAM;;0CAE3B,EAAE,QAAQ;MAC9C,CAAC;QACH;QAEA,MAAM,WAAW,MAAM,MAAM,UAAU;YACrC,QAAQ;YACR,SAAS;gBACP,UAAU;gBACV,WAAW,QAAQ,GAAG,CAAC,aAAa;gBACpC,gBAAgB;YAClB;YACA,MAAM,KAAK,SAAS,CAAC;QACvB;QAEA,MAAM,eAAe,MAAM,SAAS,IAAI;QAExC,IAAI,CAAC,SAAS,EAAE,EAAE;YAChB,QAAQ,KAAK,CAAC,oBAAoB;YAClC,MAAM,IAAI,MAAM,CAAC,gCAAgC,EAAE,SAAS,MAAM,EAAE;QACtE;QACA,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACtB;YAAE,SAAS;YAA4B,eAAe;QAAa,GACnE;YAAE,QAAQ;QAAI;IAGlB,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,kDAAkD;QAChE,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACtB;YAAE,OAAO;QAAkE,GAC3E;YAAE,QAAQ;QAAI;IAElB;AACF","debugId":null}}]
}